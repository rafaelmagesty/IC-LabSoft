commit_hash,author,message,file_path,commit_url,removed_chunk,added_chunk
eedae98e2fe133adf783c0d297c84c9787375649,Ray Bellis,"db/PadManager.js: convert sanitizePadId() to Promises

The function is now iterative rather than recursive.",src/node/db/PadManager.js,https://github.com/ether/etherpad-lite/commit/eedae98e2fe133adf783c0d297c84c9787375649,"// returns a sanitized padId, respecting legacy pad id formats

function sanitizePadId(padId, callback) {

  var transform_index = arguments[2] || 0;



  // we're out of possible transformations, so just return it

  if (transform_index >= padIdTransforms.length) {

    callback(padId);

    return;

  }

  // check if padId exists

  exports.doesPadExists(padId, function(junk, exists) {

      callback(padId);



      return;

    // get the next transformation *that's different*

    var transformedPadId = padId;

    while(transformedPadId == padId && transform_index < padIdTransforms.length) {

      transformedPadId = padId.replace(padIdTransforms[transform_index][0], padIdTransforms[transform_index][1]);

      transform_index += 1;

    }



    // check the next transform

    sanitizePadId(transformedPadId, callback, transform_index);

  });

}



// sanitizePadId can't use thenify: single arg callback

exports.sanitizePadId = function(padId, callback) {

  if (callback) {

    return sanitizePadId(padId, callback);

  } else {

    return new Promise(resolve => sanitizePadId(padId, resolve));
","/**

 * An array of padId transformations. These represent changes in pad name policy over

 * time, and allow us to ""play back"" these changes so legacy padIds can be found.

 */

const padIdTransforms = [

  [/\s+/g, '_'],

  [/:+/g, '_']

];

// returns a sanitized padId, respecting legacy pad id formats

exports.sanitizePadId = async function sanitizePadId(padId) {

  for (let i = 0, n = padIdTransforms.length; i < n; ++i) {

    let exists = await exports.doesPadExist(padId);

      return padId;

    let [from, to] = padIdTransforms[i];

    padId = padId.replace(from, to);



  // we're out of possible transformations, so just return it

  return padId;
"
8756fed80dd9b97a418ce292843b389b79e348b0,Richard Hansen,PadMessageHandler: Use `await` instead of `p.then()`,src/node/handler/PadMessageHandler.js,https://github.com/ether/etherpad-lite/commit/8756fed80dd9b97a418ce292843b389b79e348b0,"      let p = cached ? Promise.resolve(cached) : authorManager.getAuthor(author);

      return p.then(authorInfo => {

        // default fallback color to use if authorInfo.colorId is null

        const defaultColor = ""#daf0b2"";

        if (!authorInfo) {

          console.warn(`handleClientReady(): no authorInfo parameter was received. Default values are going to be used. See issue #3612.  This can be caused by a user clicking undo after clearing all authorship colors see #2802`);

          authorInfo = {};

        }

        // For some reason sometimes name isn't set

        // Catch this issue here and use a fixed name.

        if (!authorInfo.name) {

          console.warn(`handleClientReady(): client submitted no author name. Using ""Anonymous"". See: issue #3612`);

          authorInfo.name = ""Anonymous"";

        }

        // For some reason sometimes colorId isn't set

        // Catch this issue here and use a fixed color.

        if (!authorInfo.colorId) {

          console.warn(`handleClientReady(): author ""${authorInfo.name}"" has no property colorId. Using the default color ${defaultColor}. See issue #3612`);

          authorInfo.colorId = defaultColor;

        }

        // Send the new User a Notification about this other user

        let msg = {

          ""type"": ""COLLABROOM"",

          ""data"": {

            type: ""USER_NEWINFO"",

            userInfo: {

              ""ip"": ""127.0.0.1"",

              ""colorId"": authorInfo.colorId,

              ""name"": authorInfo.name,

              ""userAgent"": ""Anonymous"",

              ""userId"": author

            }

        };

        client.json.send(msg);

      });
","      const authorInfo = await (cached ? Promise.resolve(cached) : authorManager.getAuthor(author));

      // default fallback color to use if authorInfo.colorId is null

      const defaultColor = ""#daf0b2"";

      if (!authorInfo) {

        console.warn(`handleClientReady(): no authorInfo parameter was received. Default values are going to be used. See issue #3612.  This can be caused by a user clicking undo after clearing all authorship colors see #2802`);

        authorInfo = {};

      }

      // For some reason sometimes name isn't set

      // Catch this issue here and use a fixed name.

      if (!authorInfo.name) {

        console.warn(`handleClientReady(): client submitted no author name. Using ""Anonymous"". See: issue #3612`);

        authorInfo.name = ""Anonymous"";

      }

      // For some reason sometimes colorId isn't set

      // Catch this issue here and use a fixed color.

      if (!authorInfo.colorId) {

        console.warn(`handleClientReady(): author ""${authorInfo.name}"" has no property colorId. Using the default color ${defaultColor}. See issue #3612`);

        authorInfo.colorId = defaultColor;

      }

      // Send the new User a Notification about this other user

      let msg = {

        ""type"": ""COLLABROOM"",

        ""data"": {

          type: ""USER_NEWINFO"",

          userInfo: {

            ""ip"": ""127.0.0.1"",

            ""colorId"": authorInfo.colorId,

            ""name"": authorInfo.name,

            ""userAgent"": ""Anonymous"",

            ""userId"": author

        }

      };

      client.json.send(msg);
"
346111250e87fa82b3f8e955a6fb24cd219870d0,Richard Hansen,"utils: Fix promise creation accounting bug in promises.timesLimit

Before this change, `promises.timesLimit()` created `concurrency - 1`
too many promises. The only users of this function use a concurrency
of 500, so this meant that 499 extra promises were created each time
it was used. The bug didn't affect correctness, but it did result in a
large number of unnecessary database operations whenever a pad was
deleted. This change fixes that bug.

Also:
  * Convert the function to async and have it resolve after all of the
    created promises are resolved.
  * Reject concurrency of 0 (unless total is 0).
  * Document the function.
  * Add tests.",src/node/utils/promises.js,https://github.com/ether/etherpad-lite/commit/346111250e87fa82b3f8e955a6fb24cd219870d0,"exports.timesLimit = function(ltMax, concurrency, promiseCreator) {

  var done = 0

  var current = 0



  function addAnother () {

    function _internalRun () {

      done++



      if (done < ltMax) {

        addAnother()

      }

    }



    promiseCreator(current)

      .then(_internalRun)

      .catch(_internalRun)



    current++

  }



  for (var i = 0; i < concurrency && i < ltMax; i++) {

    addAnother()
","// Calls `promiseCreator(i)` a total number of `total` times, where `i` is 0 through `total - 1` (in

// order). The `concurrency` argument specifies the maximum number of Promises returned by

// `promiseCreator` that are allowed to be active (unresolved) simultaneously. (In other words: If

// `total` is greater than `concurrency`, then `concurrency` Promises will be created right away,

// and each remaining Promise will be created once one of the earlier Promises resolves.) This async

// function resolves once all `total` Promises have resolved.

exports.timesLimit = async (total, concurrency, promiseCreator) => {

  if (total > 0 && concurrency <= 0) throw new RangeError('concurrency must be positive');

  let next = 0;

  const addAnother = () => promiseCreator(next++).finally(() => {

    if (next < total) return addAnother();

  });

  const promises = [];

  for (var i = 0; i < concurrency && i < total; i++) {

    promises.push(addAnother());

  await Promise.all(promises);
"
8a918fbc46f28fec9510a2953f2fdc5a08008427,Richard Hansen,plugins: `async`ify more functions,src/static/js/pluginfw/installer.js,https://github.com/ether/etherpad-lite/commit/8a918fbc46f28fec9510a2953f2fdc5a08008427,"/*

 * We cannot use arrow functions in this file, because code in /src/static

 * can end up being loaded in browsers, and we still support IE11.

 */

exports.uninstall = function(plugin_name, cb) {



  withNpm(function(er) {

    if (er) return cb && cb(er);



    npm.commands.uninstall([plugin_name], function(er) {

      if (er) return cb && cb(er);

      hooks.aCallAll(""pluginUninstall"", {plugin_name: plugin_name})

        .then(plugins.update)

        .then(function() { cb(null) })

        .catch(function(er) { cb(er) });

    });

  });

/*

 * We cannot use arrow functions in this file, because code in /src/static

 * can end up being loaded in browsers, and we still support IE11.

 */

exports.install = function(plugin_name, cb) {



  withNpm(function(er) {

    if (er) return cb && cb(er);



    npm.commands.install([plugin_name], function(er) {

      if (er) return cb && cb(er);

      hooks.aCallAll(""pluginInstall"", {plugin_name: plugin_name})

        .then(plugins.update)

        .then(function() { cb(null) })

        .catch(function(er) { cb(er) });

    });

  });
","exports.uninstall = async (pluginName, cb = null) => {

  try {

    await loadNpm();

    await util.promisify(npm.commands.uninstall)([pluginName]);

    await hooks.aCallAll('pluginUninstall', {pluginName});

    await plugins.update();

  } catch (err) {

    cb(err || new Error(err));

    throw err;

  }

  cb(null);

exports.install = async (pluginName, cb = null) => {

  try {

    await loadNpm();

    await util.promisify(npm.commands.install)([pluginName]);

    await hooks.aCallAll('pluginInstall', {pluginName});

    await plugins.update();

  } catch (err) {

    cb(err || new Error(err));

    throw err;

  }

  cb(null);
"
8a918fbc46f28fec9510a2953f2fdc5a08008427,Richard Hansen,plugins: `async`ify more functions,src/static/js/pluginfw/plugins.js,https://github.com/ether/etherpad-lite/commit/8a918fbc46f28fec9510a2953f2fdc5a08008427,"  let p = Object.keys(packages).map(function (plugin_name) {

    return loadPlugin(packages, plugin_name, plugins, parts);

  });



  return Promise.all(p).then(function() {

    defs.plugins = plugins;

    defs.parts = sortParts(parts);

    defs.hooks = pluginUtils.extractHooks(defs.parts, 'hooks', exports.pathNormalization);

    defs.loaded = true;

  }).then(callInit);
","  await Promise.all(Object.keys(packages).map(

    async (pluginName) => await loadPlugin(packages, pluginName, plugins, parts)));



  defs.plugins = plugins;

  defs.parts = sortParts(parts);

  defs.hooks = pluginUtils.extractHooks(defs.parts, 'hooks', exports.pathNormalization);

  defs.loaded = true;

  await callInit();
"
2fdc73735599b5c8f68bf5555be9f6c71c7454de,John McLear,"bugfix, lint and refactor all bin scripts (#4617)

* bugfix, lint and refactor all bin scripts

* for squash: throw Error(message) rather than log(message); throw Error()

* for squash: Exit non-0 on unhandled Promise rejection

Many of the recent lint changes have converted normal functions to
async functions, and an error thrown in an async function does not
cause Node.js to exit by default.

* for squash: fix `require()` paths

* for squash: remove erroneous `Object.keys()` call

* for squash: fix missing `continue` statements

* for squash: Fix HTTP method for deleteSession

* for squash: delete erroneous throw

Throw is only for errors, not successful completion.

* for squash: redo migrateDirtyDBtoRealDB.js to fix async bugs

* for squash: fix erroneous use of `for..of`

* for squash: Add line break between statements

* for squash: put closing paren on same line as last arg

* for squash: Move `log()` back up where it was

to minimize the diff to develop

* for squash: indentation fixes

* for squash: typo fix

* for squash: wrap long lines

* for squash: use `util.callbackify` to silence promise/no-callback-in-promise warning

* for squash: use double quotes to improve readability

Co-authored-by: Richard Hansen <rhansen@rhansen.org>",bin/deleteAllGroupSessions.js,https://github.com/ether/etherpad-lite/commit/2fdc73735599b5c8f68bf5555be9f6c71c7454de,"const request = require('../src/node_modules/request');

const settings = require(`${__dirname}/../tests/container/loadSettings`).loadSettings();

const supertest = require(`${__dirname}/../src/node_modules/supertest`);

const api = supertest(`http://${settings.ip}:${settings.port}`);

const apikey = fs.readFileSync(filePath, {encoding: 'utf-8'});



// Set apiVersion to base value, we change this later.

let apiVersion = 1;

let guids;



// Update the apiVersion

api.get('/api/')

    .expect((res) => {

      apiVersion = res.body.currentVersion;

      if (!res.body.currentVersion) throw new Error('No version set in API');

      return;

    })

    .then(() => {

      const guri = `/api/${apiVersion}/listAllGroups?apikey=${apikey}`;

      api.get(guri)

          .then((res) => {

            guids = res.body.data.groupIDs;

            guids.forEach((groupID) => {

              const luri = `/api/${apiVersion}/listSessionsOfGroup?apikey=${apikey}&groupID=${groupID}`;

              api.get(luri)

                  .then((res) => {

                    if (res.body.data) {

                      Object.keys(res.body.data).forEach((sessionID) => {

                        if (sessionID) {

                          console.log('Deleting', sessionID);

                          const duri = `/api/${apiVersion}/deleteSession?apikey=${apikey}&sessionID=${sessionID}`;

                          api.post(duri); // deletes

                        }

                      });

                    } else {

                      // no session in this group.

                    }

                  });

            });

          });

    });
","'use strict';



// As of v14, Node.js does not exit when there is an unhandled Promise rejection. Convert an

// unhandled rejection into an uncaught exception, which does cause Node.js to exit.

process.on('unhandledRejection', (err) => { throw err; });



const supertest = require('ep_etherpad-lite/node_modules/supertest');

// Set a delete counter which will increment on each delete attempt

// TODO: Check delete is successful before incrementing

let deleteCount = 0;



console.log('Deleting all group sessions, please be patient.');



(async () => {

  const settings = require('../tests/container/loadSettings').loadSettings();

  const apikey = fs.readFileSync(filePath, {encoding: 'utf-8'});

  const api = supertest(`http://${settings.ip}:${settings.port}`);



  const apiVersionResponse = await api.get('/api/');

  const apiVersion = apiVersionResponse.body.currentVersion; // 1.12.5



  const groupsResponse = await api.get(`/api/${apiVersion}/listAllGroups?apikey=${apikey}`);

  const groups = groupsResponse.body.data.groupIDs; // ['whateverGroupID']



  for (const groupID of groups) {

    const sessionURI = `/api/${apiVersion}/listSessionsOfGroup?apikey=${apikey}&groupID=${groupID}`;

    const sessionsResponse = await api.get(sessionURI);

    const sessions = sessionsResponse.body.data;



    for (const sessionID of Object.keys(sessions)) {

      const deleteURI = `/api/${apiVersion}/deleteSession?apikey=${apikey}&sessionID=${sessionID}`;

      await api.post(deleteURI); // delete

      deleteCount++;

    }

  }

  console.log(`Deleted ${deleteCount} sessions`);

})();
"
dd7ea1a8f9ee91e16db13379f0b0124e061fea6e,Richard Hansen,Minify: Asyncify `statFile()`,src/node/utils/Minify.js,https://github.com/ether/etherpad-lite/commit/dd7ea1a8f9ee91e16db13379f0b0124e061fea6e,"    callback(null, null, false);

    lastModifiedDateOfEverything().then(

        (date) => callback(null, date, true),

        (err) => callback(err || new Error(err)));

    callback(null, requireLastModified(), true);

    fs.stat(ROOT_DIR + filename, (error, stats) => {

      if (error) {

        if (error.code === 'ENOENT') {

          // Stat the directory instead.

          statFile(path.dirname(filename), (error, date, exists) => {

            callback(error, date, false);

          }, dirStatLimit - 1);

        } else {

          callback(error);

        }

      } else if (stats.isFile()) {

        callback(null, stats.mtime.getTime(), true);

      } else {

        callback(null, stats.mtime.getTime(), false);

    });
","    return [null, false];

    return [await lastModifiedDateOfEverything(), true];

    return [requireLastModified(), true];

    let stats;

    try {

      stats = await util.promisify(fs.stat)(ROOT_DIR + filename);

    } catch (err) {

      if (err.code === 'ENOENT') {

        // Stat the directory instead.

        const [date] = await statFile(path.dirname(filename), dirStatLimit - 1);

        return [date, false];

      throw err;

    }

    return [stats.mtime.getTime(), stats.isFile()];
"
fba55fa6cf2d2728bcbc9aef4d3cc71389e591b1,Richard Hansen,ImportHandler: Refactor `doImport()` for readability,src/node/handler/ImportHandler.js,https://github.com/ether/etherpad-lite/commit/fba55fa6cf2d2728bcbc9aef4d3cc71389e591b1,"exports.doImport = (req, res, padId) => {

  /**

   * NB: abuse the 'req' object by storing an additional

   * 'directDatabaseAccess' property on it so that it can

   * be passed back in the HTML below.

   *

   * this is necessary because in the 'throw' paths of

   * the function above there's no other way to return

   * a value to the caller.

   */

  doImport(req, res, padId).catch((err) => {

  }).then(() => {

    // close the connection

    res.send([

      '<script>',

      ""document.addEventListener('DOMContentLoaded', () => {"",

      '  window.parent.padimpexp.handleFrameCall(',

      `      ${JSON.stringify(!!req.directDatabaseAccess)}, ${JSON.stringify(status)});`,

      '});',

      '</script>',

    ].join('\n'));

  });
","

  return false;

exports.doImport = async (req, res, padId) => {

  let directDatabaseAccess;

  try {

    directDatabaseAccess = await doImport(req, res, padId);

  } catch (err) {

  }

  // close the connection

  res.send([

    '<script>',

    ""document.addEventListener('DOMContentLoaded', () => {"",

    '  window.parent.padimpexp.handleFrameCall(',

    `      ${JSON.stringify(directDatabaseAccess)}, ${JSON.stringify(status)});`,

    '});',

    '</script>',

  ].join('\n'));
"
9cd67cd99079b2fe1f3a9d9a1a625a2f2eabee07,Richard Hansen,PadMessageHandler: Delete unnecessary use of `Promise.then()`,src/node/handler/PadMessageHandler.js,https://github.com/ether/etherpad-lite/commit/9cd67cd99079b2fe1f3a9d9a1a625a2f2eabee07,"      return authorManager.getAuthor(s.author).then((author) => {

        // Fixes: https://github.com/ether/etherpad-lite/issues/4120

        // On restart author might not be populated?

        if (author) {

          author.id = s.author;

          padUsers.push(author);

        }

      });
","      const author = await authorManager.getAuthor(s.author);

      // Fixes: https://github.com/ether/etherpad-lite/issues/4120

      // On restart author might not be populated?

      if (author) {

        author.id = s.author;

        padUsers.push(author);

      }
"
e2bfe2fd10b9947d51391951be0d00dd109a2a9a,Richard Hansen,pad_editor: Promisify `init()`,src/static/js/pad_editor.js,https://github.com/ether/etherpad-lite/commit/e2bfe2fd10b9947d51391951be0d00dd109a2a9a,"    init: (readyFunc, initialViewOptions, _pad) => {



      const aceReady = () => {

        $('#editorloadingbox').hide();

        if (readyFunc) {

          readyFunc();



          // Listen for clicks on sidediv items

          const $outerdoc = $('iframe[name=""ace_outer""]').contents().find('#outerdocbody');

          $outerdoc.find('#sidedivinner').on('click', 'div', function () {

            const targetLineNumber = $(this).index() + 1;

            window.location.hash = `L${targetLineNumber}`;

          });



          exports.focusOnLine(self.ace);

        }

      };



      self.ace.init('editorcontainer', '').then(

          () => aceReady(), (err) => { throw err || new Error(err); });
","    init: async (initialViewOptions, _pad) => {

      await self.ace.init('editorcontainer', '');

      $('#editorloadingbox').hide();

      // Listen for clicks on sidediv items

      const $outerdoc = $('iframe[name=""ace_outer""]').contents().find('#outerdocbody');

      $outerdoc.find('#sidedivinner').on('click', 'div', function () {

        const targetLineNumber = $(this).index() + 1;

        window.location.hash = `L${targetLineNumber}`;

      });

      exports.focusOnLine(self.ace);
"
98f0e931feb9f5d9cfd8c51f9f3403e37a5e5dae,Richard Hansen,MinifyWorker: Promisify `compressCSS`,src/node/utils/MinifyWorker.js,https://github.com/ether/etherpad-lite/commit/98f0e931feb9f5d9cfd8c51f9f3403e37a5e5dae,"const compressCSS = (filename, ROOT_DIR) => new Promise((res, rej) => {



    new CleanCSS({

    }).minify([absPath], (errors, minified) => {

      if (errors) return rej(errors);



      return res(minified.styles);

    });

});
","const compressCSS = async (filename, ROOT_DIR) => {

    const output = await new CleanCSS({

    }).minify([absPath]);

    return output.styles;

};
"
