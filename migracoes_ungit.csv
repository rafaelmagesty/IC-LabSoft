commit_hash,author,message,file_path,commit_url,removed_chunk,added_chunk
3785cb9017dc6ac54eaf0019dfc7c1fc7e39a0df,codingtwinky,"Using promisified async with a custom isFileExists func

Reluctantly...",source/git-promise.js,https://github.com/FredrikNoren/ungit/commit/3785cb9017dc6ac54eaf0019dfc7c1fc7e39a0df,"var fs = Promise.promisifyAll(require(""fs""));

var fsIsFileExists = function(file) {

  return fs.accessAsync(file, fs.F_OK)

    .then(function() { return true; })

    .catch(function() { return false; });

}
","var fs = require('./utils/fs-async');
"
ea0975ce90048c257b2a6a4a99cd92ab3e4d73fe,jung-kim,"Apply suggestions from code review

Co-authored-by: campersau <buchholz.bastian@googlemail.com>",test/common-es6.js,https://github.com/FredrikNoren/ungit/commit/ea0975ce90048c257b2a6a4a99cd92ab3e4d73fe,"  return this.post(req, '/init', { path: res.path, bare: !!config.bare }).then(() => res.path);
","  await this.post(req, '/init', { path: res.path, bare: !!config.bare });

  return res.path;
"
9dac1120d45fda2498324d4f80a36a13bed6dc8c,Jung (JK) Kim,experiment,components/graph/graph.js,https://github.com/FredrikNoren/ungit/commit/9dac1120d45fda2498324d4f80a36a13bed6dc8c,"  loadNodesFromApi() {

    return this.server

      .getPromise('/gitlog', { path: this.repoPath(), limit: this.limit(), skip: this.skip() })

      .then((log) => {

        // set new limit and skip

        this.limit(parseInt(log.limit));

        this.skip(parseInt(log.skip));

        return log.nodes || [];

      })

      .then((nodes) =>

        // create and/or calculate nodes

        this.computeNode(

          nodes.map((logEntry) => {

            return this.getNode(logEntry.sha1, logEntry); // convert to node object

          })

        )

      )

      .then((nodes) => {

        // create edges

        const edges = [];

        nodes.forEach((node) => {

          node.parents().forEach((parentSha1) => {

            edges.push(this.getEdge(node.sha1, parentSha1));

          });

          node.render();



        this.edges(edges);

        this.nodes(nodes);

        if (nodes.length > 0) {

          this.graphHeight(nodes[nodes.length - 1].cy() + 80);

        }

        this.graphWidth(1000 + this.heighstBranchOrder * 90);

      })

      .catch((e) => this.server.unhandledRejection(e))

      .finally(() => {

        if (window.innerHeight - this.graphHeight() > 0 && nodeSize != this.nodes().length) {

          this.scrolledToEnd();

        }

        ungit.logger.debug('graph.loadNodesFromApi() finished');
","  async loadNodesFromApi() {

    const edges = [];

    try {

      const log = await this.server.getPromise('/gitlog', { path: this.repoPath(), limit: this.limit(), skip: this.skip() });

      if (isSamePayload('log', log)) {

        return;

      }

      const nodes = this.computeNode(

        (log.nodes || []).map((logEntry) => {

          return this.getNode(logEntry.sha1, logEntry); // convert to node object

        })

      );



      // create edges

      nodes.forEach((node) => {

        node.parents().forEach((parentSha1) => {

          edges.push(this.getEdge(node.sha1, parentSha1));

        node.render();



      this.edges(edges);

      this.nodes(nodes);

      if (nodes.length > 0) {

        this.graphHeight(nodes[nodes.length - 1].cy() + 80);

      }

      this.graphWidth(1000 + this.heighstBranchOrder * 90);

    } catch (e) {

      this.server.unhandledRejection(e)

    } finally {

      if (window.innerHeight - this.graphHeight() > 0 && nodeSize != this.nodes().length) {

        this.scrolledToEnd();

      }

      ungit.logger.debug('graph.loadNodesFromApi() finished');

    }
"
9dac1120d45fda2498324d4f80a36a13bed6dc8c,Jung (JK) Kim,experiment,components/graph/graph.js,https://github.com/FredrikNoren/ungit/commit/9dac1120d45fda2498324d4f80a36a13bed6dc8c,"  updateBranches() {

    this.server

      .getPromise('/checkout', { path: this.repoPath() })

      .then((res) => {

        this.checkedOutBranch(res);

      })

      .catch((err) => {

        if (err.errorCode != 'not-a-repository') this.server.unhandledRejection(err);

      });
","  async updateBranches() {

    const checkout = await this.server.getPromise('/checkout', { path: this.repoPath() });



    if (isSamePayload('checkout', checkout)) {

      return;

    }



    try {

      this.checkedOutBranch(checkout)

    } catch (err) {

      if (err.errorCode != 'not-a-repository') this.server.unhandledRejection(err);

    }
"
9dac1120d45fda2498324d4f80a36a13bed6dc8c,Jung (JK) Kim,experiment,components/staging/staging.js,https://github.com/FredrikNoren/ungit/commit/9dac1120d45fda2498324d4f80a36a13bed6dc8c,"  refreshContent() {

    return Promise.all([

      this.server

        .getPromise('/head', { path: this.repoPath(), limit: 1 })

        .then((log) => {

          if (log.length > 0) {

            const array = log[0].message.split('\n');

            this.HEAD({ title: array[0], body: array.slice(2).join('\n') });

          } else this.HEAD(null);

        })

        .catch((err) => {

          if (err.errorCode != 'must-be-in-working-tree' && err.errorCode != 'no-such-path') {

            this.server.unhandledRejection(err);

          }

        }),

      this.server

        .getPromise('/status', { path: this.repoPath(), fileLimit: filesToDisplayLimit })

        .then((status) => {

          if (Object.keys(status.files).length > filesToDisplayLimit && !this.loadAnyway) {

            if (this.isDiagOpen) {

              return;

            this.isDiagOpen = true;

            return components

              .create('toomanyfilesdialogviewmodel', {

                title: 'Too many unstaged files',

                details: 'It is recommended to use command line as ungit may be too slow.',

              })

              .show()

              .closeThen((diag) => {

                this.isDiagOpen = false;

                if (diag.result()) {

                  this.loadAnyway = true;

                  this.loadStatus(status);

                } else {

                  window.location.href = '/#/';

                }

              });

          } else {

            ungit.logger.debug('staging.refreshContent() status', status);

            this.loadStatus(status);

          }

        })

        .catch((err) => {

          if (err.errorCode != 'must-be-in-working-tree' && err.errorCode != 'no-such-path') {

            this.server.unhandledRejection(err);

          }

        }),

    ]).finally(() => ungit.logger.debug('staging.refreshContent() finished'));
","  async refreshContent() {



    try {

      const headPromise = this.server.getPromise('/head', { path: this.repoPath(), limit: 1 });

      const statusPromise = this.server.getPromise('/status', { path: this.repoPath(), fileLimit: filesToDisplayLimit });

      const log = await headPromise;

      if (log.length > 0) {

        const array = log[0].message.split('\n');

        this.HEAD({ title: array[0], body: array.slice(2).join('\n') });

      } else {

        this.HEAD(null);

      }



      const status = await statusPromise;

      if (isSamePayload('status', status)) {

        return;

      }



      if (Object.keys(status.files).length > filesToDisplayLimit && !this.loadAnyway) {

        if (this.isDiagOpen) {

          return;

        }

        this.isDiagOpen = true;

        return components

          .create('toomanyfilesdialogviewmodel', {

            title: 'Too many unstaged files',

            details: 'It is recommended to use command line as ungit may be too slow.',

          })

          .show()

          .closeThen((diag) => {

            this.isDiagOpen = false;

            if (diag.result()) {

              this.loadAnyway = true;

              this.loadStatus(status);

            } else {

              window.location.href = '/#/';

          });

      } else {

        ungit.logger.debug('staging.refreshContent() status', status);

        this.loadStatus(status);

      }



    } catch (err) {

      if (err.errorCode != 'must-be-in-working-tree' && err.errorCode != 'no-such-path') {

        this.server.unhandledRejection(err);

      }

    } finally {

      ungit.logger.debug('staging.refreshContent() finished');

    }
"
9dac1120d45fda2498324d4f80a36a13bed6dc8c,Jung (JK) Kim,experiment,components/stash/stash.js,https://github.com/FredrikNoren/ungit/commit/9dac1120d45fda2498324d4f80a36a13bed6dc8c,"  refresh() {

    this.server

      .getPromise('/stashes', { path: this.repoPath() })

      .then((stashes) => {

        let changed = this.stashedChanges().length != stashes.length;

        if (!changed) {

          changed = !this.stashedChanges().every((item1) =>

            stashes.some((item2) => item1.sha1 == item2.sha1)

          );

        }

        if (changed) {

          this.stashedChanges(stashes.map((item) => new StashItemViewModel(this, item)));

        }

      })

      .catch((err) => {

        if (err.errorCode != 'no-such-path') this.server.unhandledRejection(err);

      })

      .finally(() => ungit.logger.debug('stash.refresh() finished'));
","  async refresh() {

    try {

      const stashes = await this.server.getPromise('/stashes', { path: this.repoPath() });

      if (isSamePayload('stashes', stashes)) {

        return;

      }



      let changed = this.stashedChanges().length != stashes.length;

      if (!changed) {

        changed = !this.stashedChanges().every((item1) =>

          stashes.some((item2) => item1.sha1 == item2.sha1)

        );

      }



      if (changed) {

        this.stashedChanges(stashes.map((item) => new StashItemViewModel(this, item)));

      }

    } catch (err) {

      if (err.errorCode != 'no-such-path') this.server.unhandledRejection(err);

    } finally {

      ungit.logger.debug('stash.refresh() finished');

    }
"
a1aa89550045610bcf34abd8916f852582871ce7,Jung (JK) Kim,Change on program events to asyncs awaits,components/branches/branches.js,https://github.com/FredrikNoren/ungit/commit/a1aa89550045610bcf34abd8916f852582871ce7,"  onProgramEvent(event) {

      this.updateRefsDebounced();

  updateRefs(forceRemoteFetch) {

    ungit.logger.debug('branch.updateRefs() triggered');

    const currentBranchProm = this.server

      .getPromise('/branches', { path: this.repoPath() })

      .then((branches) =>

        branches.forEach((b) => {

          if (b.current) {

            this.current(b.name);

          }

        })

      )

      .catch((err) => {

        this.current('~error');

      });

    // refreshes tags branches and remote branches

    const refsProm = this.server

      .getPromise('/refs', { path: this.repoPath(), remoteFetch: forceRemoteFetch })

      .then((refs) => {

        if (isSamePayload('refs', refs)) {

          return;

        const version = Date.now();

        const sorted = refs

          .map((r) => {

            const ref = this.graph.getRef(r.name.replace('refs/tags', 'tag: refs/tags'));

            ref.node(this.graph.getNode(r.sha1));

            ref.version = version;

            return ref;

          })

          .sort((a, b) => {

            if (a.current() || b.current()) {

              return a.current() ? -1 : 1;

            } else if (a.isRemoteBranch === b.isRemoteBranch) {

              if (a.name < b.name) {

                return -1;

              }

              if (a.name > b.name) {

                return 1;

              }

              return 0;

            } else {

              return a.isRemoteBranch ? 1 : -1;

          })

          .filter((ref) => {

            if (ref.localRefName == 'refs/stash') return false;

            if (ref.localRefName.endsWith('/HEAD')) return false;

            if (!this.isShowRemote() && ref.isRemote) return false;

            if (!this.isShowBranch() && ref.isBranch) return false;

            if (!this.isShowTag() && ref.isTag) return false;

            return true;

          });

        this.branchesAndLocalTags(sorted);

        this.graph.refs().forEach((ref) => {

          // ref was removed from another source

          if (!ref.isRemoteTag && ref.value !== 'HEAD' && (!ref.version || ref.version < version)) {

            ref.remove(true);

      })

      .catch((e) => {

        ungit.logger.error('error during branch update: ', e);



    return Promise.all([currentBranchProm, refsProm]).finally(() =>

      ungit.logger.debug('branch.updateRefs() finished')

    );
","  async onProgramEvent(event) {

      await this.updateRefs();

  async updateRefs(forceRemoteFetch) {

    const branchesProm = this.server.getPromise('/branches', { path: this.repoPath() });

    const refsProm = this.server.getPromise('/refs', { path: this.repoPath(), remoteFetch: forceRemoteFetch });

    try {

      // set current branch

      (await branchesProm).forEach(b => {

        if (b.current) {

          this.current(b.name);

      });

    } catch (e) {

      this.current('~error');

      ungit.logger.warn('error while setting current branch', e);

    }



    try {

      // update branches and tags references.

      const refs = await refsProm

      if (isSamePayload('refs', refs)) {

        return;

      }



      const version = Date.now();

      const sorted = refs

        .map((r) => {

          const ref = this.graph.getRef(r.name.replace('refs/tags', 'tag: refs/tags'));

          ref.node(this.graph.getNode(r.sha1));

          ref.version = version;

          return ref;

        })

        .sort((a, b) => {

          if (a.current() || b.current()) {

            return a.current() ? -1 : 1;

          } else if (a.isRemoteBranch === b.isRemoteBranch) {

            if (a.name < b.name) {

              return -1;

            if (a.name > b.name) {

              return 1;

            }

            return 0;

          } else {

            return a.isRemoteBranch ? 1 : -1;

        })

        .filter((ref) => {

          if (ref.localRefName == 'refs/stash') return false;

          if (ref.localRefName.endsWith('/HEAD')) return false;

          if (!this.isShowRemote() && ref.isRemote) return false;

          if (!this.isShowBranch() && ref.isBranch) return false;

          if (!this.isShowTag() && ref.isTag) return false;

          return true;

      this.branchesAndLocalTags(sorted);

      this.graph.refs().forEach((ref) => {

        // ref was removed from another source

        if (!ref.isRemoteTag && ref.value !== 'HEAD' && (!ref.version || ref.version < version)) {

          ref.remove(true);

        }

    } catch (e) {

      ungit.logger.error('error during branch update: ', e);

    }
"
a1aa89550045610bcf34abd8916f852582871ce7,Jung (JK) Kim,Change on program events to asyncs awaits,components/remotes/remotes.js,https://github.com/FredrikNoren/ungit/commit/a1aa89550045610bcf34abd8916f852582871ce7,"  onProgramEvent(event) {

    if (

      event.event === 'working-tree-changed' ||

      event.event === 'request-app-content-refresh' ||

      event.event === 'request-fetch-tags'

    ) {

      if (event.event != 'working-tree-changed' || this.shouldAutoFetch) this.fetchDebounced();

  fetch(options) {

    if (this.isFetching || !this.currentRemote()) return;

    this.isFetching = true;

          path: this.repoPath(),

          remote: this.currentRemote(),

        })

    return Promise.all([tagPromise, fetchPromise])

      .then((result) => {

        if (options.tags) {

          programEvents.dispatch({ event: 'remote-tags-update', tags: result[0] });

        }

        if (!this.server.isInternetConnected) {

          this.server.isInternetConnected = true;

        }

      })

      .catch((err) => {

        let errorMessage;

        let stdout;

        let stderr;

        try {

          errorMessage = `Ungit has failed to fetch a remote.  ${err.res.body.error}`;

          stdout = err.res.body.stdout;

          stderr = err.res.body.stderr;

        } catch (e) {

          errorMessage = '';

        }

        if (errorMessage.includes('Could not resolve host')) {

          if (this.server.isInternetConnected) {

            this.server.isInternetConnected = false;

            errorMessage =

              'Could not resolve host. This usually means you are disconnected from internet and no longer push or fetch from remote. However, Ungit will be functional for local git operations.';

            stdout = '';

            stderr = '';

          } else {

            // Message is already seen, just return

            return;

          }

        programEvents.dispatch({

          event: 'git-error',

          data: {

            isWarning: true,

            command: err.res.body.command,

            error: err.res.body.error,

            stdout,

            stderr,

            repoPath: err.res.body.workingDirectory,

          },

        });

      })

      .finally(() => {

        this.isFetching = false;

        ungit.logger.debug('remotes.fetch() finished');
","  async onProgramEvent(event) {

    if (event.event === 'request-app-content-refresh' || event.event === 'request-fetch-tags') {

      await this.fetch({ tags: true });

    } else if (event.evnet === 'working-tree-changed' && this.shouldAutoFetch) {

      await this.fetch({ tags: true });

  async fetch(options) {

    if (!this.currentRemote()) return;

        path: this.repoPath(),

        remote: this.currentRemote(),

      })

    try {

      if (tagPromise) {

        programEvents.dispatch({ event: 'remote-tags-update', tags: await tagPromise });

      }

      if (!this.server.isInternetConnected) {

        this.server.isInternetConnected = true;

      }

    } catch (err) {

      let errorMessage;

      let stdout;

      let stderr;

      try {

        errorMessage = `Ungit has failed to fetch a remote.  ${err.res.body.error}`;

        stdout = err.res.body.stdout;

        stderr = err.res.body.stderr;

      } catch (e) {

        errorMessage = '';

      }



      if (errorMessage.includes('Could not resolve host')) {

        if (this.server.isInternetConnected) {

          this.server.isInternetConnected = false;

          errorMessage =

            'Could not resolve host. This usually means you are disconnected from internet and no longer push or fetch from remote. However, Ungit will be functional for local git operations.';

          stdout = '';

          stderr = '';

        } else {

          // Message is already seen, just return

          return;

      }

      programEvents.dispatch({

        event: 'git-error',

        data: {

          isWarning: true,

          command: err.res.body.command,

          error: err.res.body.error,

          stdout,

          stderr,

          repoPath: err.res.body.workingDirectory,

        },

    } finally {

      ungit.logger.debug('remotes.fetch() finished');

    };
"
a1aa89550045610bcf34abd8916f852582871ce7,Jung (JK) Kim,Change on program events to asyncs awaits,components/submodules/submodules.js,https://github.com/FredrikNoren/ungit/commit/a1aa89550045610bcf34abd8916f852582871ce7,"  onProgramEvent(event) {

    if (event.event == 'submodule-fetch') this.fetchSubmodules();

  updateNode(parentElement) {

      ko.renderTemplate('submodules', submoduleViewModel, {}, parentElement);

  fetchSubmodules() {

    return this.server

      .getPromise('/submodules', { path: this.repoPath() })

      .then((submodules) => {

        this.submodules(submodules && Array.isArray(submodules) ? submodules : []);

        return this;

      })

      .catch((e) => this.server.unhandledRejection(e));
","  async onProgramEvent(event) {

    if (event.event == 'submodule-fetch') await this.fetchSubmodules();

  updateNode() {

      ko.renderTemplate('submodules', submoduleViewModel, {}, this);

  async fetchSubmodules() {

    const submodules = await this.server.getPromise('/submodules', { path: this.repoPath() });

    try {

      this.submodules(submodules && Array.isArray(submodules) ? submodules : []);

    } catch (e) {

      this.server.unhandledRejection(e);

    }
"
a03e10778ccc9e3a85bc67b5c696cf4399ccfdd2,Jung (JK) Kim,Fix to use ComponentRoot,components/path/path.js,https://github.com/FredrikNoren/ungit/commit/a03e10778ccc9e3a85bc67b5c696cf4399ccfdd2,"  updateStatus() {

    return this.server

      .getPromise('/quickstatus', { path: this.repoPath() })

      .then((status) => {

        if (isSamePayload('quickstatus', status)) {

          return;

        }

        if (status.type == 'inited' || status.type == 'bare') {

          if (this.repoPath() !== status.gitRootPath) {

            this.repoPath(status.gitRootPath);

            programEvents.dispatch({ event: 'navigated-to-path', path: this.repoPath() });

            programEvents.dispatch({ event: 'working-tree-changed' });

          }

          this.status(status.type);

          if (!this.repository()) {

            this.repository(components.create('repository', { server: this.server, path: this }));

          }

        } else if (status.type == 'uninited' || status.type == 'no-such-path') {

          if (status.subRepos && status.subRepos.length > 0) {

            this.subRepos(

              status.subRepos.map((subRepo) => new SubRepositoryViewModel(this.server, subRepo))

            );

          }

          this.status(status.type);

          this.repository(null);

        return null;

      })

      .catch((err) => ungit.logger.debug('path.updateStatus() errored', err))

      .finally(() => ungit.logger.debug('path.updateStatus() finished'));

      .finally((res) => {

        this.updateStatus();

      });
","  async updateStatus() {

    const status = await this.server.getPromise('/quickstatus', { path: this.repoPath() });

    try {

      if (this.isSamePayload(status)) {

        return;

      }

      if (status.type == 'inited' || status.type == 'bare') {

        if (this.repoPath() !== status.gitRootPath) {

          this.repoPath(status.gitRootPath);

          programEvents.dispatch({ event: 'navigated-to-path', path: this.repoPath() });

          programEvents.dispatch({ event: 'working-tree-changed' });

        this.status(status.type);

        if (!this.repository()) {

          this.repository(components.create('repository', { server: this.server, path: this }));

        }

      } else if (status.type == 'uninited' || status.type == 'no-such-path') {

        if (status.subRepos && status.subRepos.length > 0) {

          this.subRepos(

            status.subRepos.map((subRepo) => new SubRepositoryViewModel(this.server, subRepo))

          );

        }

        this.status(status.type);

        this.repository(null);

      }

    } catch (err) {

      ungit.logger.debug('path.updateStatus() errored', err)

    } finally {

      ungit.logger.debug('path.updateStatus() finished')

    }

      .finally(() => this.updateStatus());
"
